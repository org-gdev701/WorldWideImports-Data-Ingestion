{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "az-env-dev"
		},
		"ADLSGen2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{concat('https://',linkedService().StorageAccName,'.dfs.core.windows.net')}"
		},
		"AKV_AzKVaults_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://AzKVaults.vault.azure.net/"
		},
		"LS_AzSQL_DB_Control_TB_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sqlsws.database.windows.net"
		},
		"LS_AzSQL_DB_Control_TB_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "WideWorldImporters"
		},
		"LS_AzSQL_DB_Control_TB_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sqladmin"
		},
		"LS_SQLServer_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "@{linkedService().ServerName}"
		},
		"LS_SQLServer_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "@{linkedService().DatabaseName}"
		},
		"LS_SQLServer_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "@{linkedService().UserName}"
		},
		"SelfHostedIRAzVm_properties_typeProperties_linkedInfo_resourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/1ae888e8-f242-4f1a-a97b-7cb12c70b281/resourcegroups/wsfdep/providers/Microsoft.DataFactory/factories/az-env-prod/integrationruntimes/SelfHostedIRAzVm"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_BottomLevel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will copy objects from one group. The objects belonging to this group will be copied parallelly.",
				"activities": [
					{
						"name": "ListObjectsFromOneGroup",
						"description": "List objects from one group and iterate each of them to downstream activities",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.ObjectsPerGroupToCopy",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "RouteJobsBasedOnLoadingBehavior",
									"description": "Check the loading behavior for each object if it requires full load or incremental load. If it is Default or FullLoad case, do full load. If it is DeltaLoad case, do incremental load.",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "GetSourceConnectionValues",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "GetDestinationConnectionValues",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@json(item().DataLoadingBehaviorSettings).dataLoadingBehavior",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "FullLoad",
												"activities": [
													{
														"name": "FullLoadOneObject",
														"description": "Take a full snapshot on this object and copy it to the destination",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [
															{
																"name": "Source",
																"value": "@{json(item().SourceObjectSettings).schema}.@{json(item().SourceObjectSettings).table}"
															},
															{
																"name": "Destination",
																"value": "@{json(item().SinkObjectSettings).fileSystem}/@{json(item().SinkObjectSettings).folderPath}/@{json(item().SinkObjectSettings).fileName}"
															}
														],
														"typeProperties": {
															"source": {
																"type": "SqlServerSource",
																"sqlReaderQuery": {
																	"value": "@json(item().CopySourceSettings).sqlReaderQuery",
																	"type": "Expression"
																},
																"partitionOption": {
																	"value": "@json(item().CopySourceSettings).partitionOption",
																	"type": "Expression"
																},
																"partitionSettings": {
																	"partitionColumnName": {
																		"value": "@json(item().CopySourceSettings).partitionColumnName",
																		"type": "Expression"
																	},
																	"partitionUpperBound": {
																		"value": "@json(item().CopySourceSettings).partitionUpperBound",
																		"type": "Expression"
																	},
																	"partitionLowerBound": {
																		"value": "@json(item().CopySourceSettings).partitionLowerBound",
																		"type": "Expression"
																	},
																	"partitionNames": "@json(item().CopySourceSettings).partitionNames"
																}
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"enableSkipIncompatibleRow": false,
															"validateDataConsistency": false,
															"logSettings": {
																"enableCopyActivityLog": true,
																"copyActivityLogSettings": {
																	"logLevel": "Info",
																	"enableReliableLogging": true
																},
																"logLocationSettings": {
																	"linkedServiceName": {
																		"referenceName": "ADLSGen2",
																		"type": "LinkedServiceReference"
																	},
																	"path": "world-wide-imports"
																}
															},
															"translator": {
																"value": "@json(item().CopyActivitySettings).translator",
																"type": "Expression"
															}
														},
														"inputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_SourceDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_schema": {
																		"value": "@json(item().SourceObjectSettings).schema",
																		"type": "Expression"
																	},
																	"cw_table": {
																		"value": "@json(item().SourceObjectSettings).table",
																		"type": "Expression"
																	},
																	"cw_ls_ServerName": {
																		"value": "@json(activity('GetSourceConnectionValues').output.value[0].ConnectionSettings).ServerName",
																		"type": "Expression"
																	},
																	"cw_ls_DatabaseName": {
																		"value": "@json(activity('GetSourceConnectionValues').output.value[0].ConnectionSettings).DatabaseName",
																		"type": "Expression"
																	},
																	"cw_ls_UserName": {
																		"value": "@json(activity('GetSourceConnectionValues').output.value[0].ConnectionSettings).UserName",
																		"type": "Expression"
																	},
																	"cw_ls_SecretName": {
																		"value": "@json(activity('GetSourceConnectionValues').output.value[0].ConnectionSettings).SecretName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_DestinationDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_fileName": {
																		"value": "@json(item().SinkObjectSettings).fileName",
																		"type": "Expression"
																	},
																	"cw_folderPath": {
																		"value": "@json(item().SinkObjectSettings).folderPath",
																		"type": "Expression"
																	},
																	"cw_fileSystem": {
																		"value": "@json(item().SinkObjectSettings).fileSystem",
																		"type": "Expression"
																	},
																	"cw_ls_StorageAccName": {
																		"value": "@json(activity('GetDestinationConnectionValues').output.value[0].ConnectionSettings).StorageAccName",
																		"type": "Expression"
																	},
																	"cw_ls_SecretName": {
																		"value": "@json(activity('GetDestinationConnectionValues').output.value[0].ConnectionSettings).SecretName",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											},
											{
												"value": "DeltaLoad",
												"activities": [
													{
														"name": "GetMaxWatermarkValue",
														"description": "Query the source object to get the max value from watermark column",
														"type": "Lookup",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "SqlServerSource",
																"sqlReaderQuery": {
																	"value": "select max([@{json(item().DataLoadingBehaviorSettings).watermarkColumnName}]) as CurrentMaxWaterMarkColumnValue from [@{json(item().SourceObjectSettings).schema}].[@{json(item().SourceObjectSettings).table}]",
																	"type": "Expression"
																},
																"partitionOption": "None"
															},
															"dataset": {
																"referenceName": "MetadataDrivenCopyTask_SourceDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_schema": {
																		"value": "@json(item().SourceObjectSettings).schema",
																		"type": "Expression"
																	},
																	"cw_table": {
																		"value": "@json(item().SourceObjectSettings).table",
																		"type": "Expression"
																	},
																	"cw_ls_ServerName": {
																		"value": "@json(activity('GetSourceConnectionValues').output.value[0].ConnectionSettings).ServerName",
																		"type": "Expression"
																	},
																	"cw_ls_DatabaseName": {
																		"value": "@json(activity('GetSourceConnectionValues').output.value[0].ConnectionSettings).DatabaseName",
																		"type": "Expression"
																	},
																	"cw_ls_UserName": {
																		"value": "@json(activity('GetSourceConnectionValues').output.value[0].ConnectionSettings).UserName",
																		"type": "Expression"
																	},
																	"cw_ls_SecretName": {
																		"value": "@json(activity('GetSourceConnectionValues').output.value[0].ConnectionSettings).SecretName",
																		"type": "Expression"
																	}
																}
															}
														}
													},
													{
														"name": "DeltaLoadOneObject",
														"description": "Copy the changed data only from last time via comparing the value in watermark column to identify changes.",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "GetMaxWatermarkValue",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [
															{
																"name": "Source",
																"value": "@{json(item().SourceObjectSettings).schema}.@{json(item().SourceObjectSettings).table}"
															},
															{
																"name": "Destination",
																"value": "@{json(item().SinkObjectSettings).fileSystem}/@{json(item().SinkObjectSettings).folderPath}/@{json(item().SinkObjectSettings).fileName}"
															}
														],
														"typeProperties": {
															"source": {
																"type": "SqlServerSource",
																"sqlReaderQuery": {
																	"value": "select * from [@{json(item().SourceObjectSettings).schema}].[@{json(item().SourceObjectSettings).table}] \n    where [@{json(item().DataLoadingBehaviorSettings).watermarkColumnName}] > @{if(contains(json(item().DataLoadingBehaviorSettings).watermarkColumnType, 'Int'),\n    json(item().DataLoadingBehaviorSettings).watermarkColumnStartValue, \n    concat('''', json(item().DataLoadingBehaviorSettings).watermarkColumnStartValue, ''''))}\n    and [@{json(item().DataLoadingBehaviorSettings).watermarkColumnName}] <= @{if(contains(json(item().DataLoadingBehaviorSettings).watermarkColumnType, 'Int'),\n    activity('GetMaxWatermarkValue').output.firstRow.CurrentMaxWaterMarkColumnValue, \n    concat('''', activity('GetMaxWatermarkValue').output.firstRow.CurrentMaxWaterMarkColumnValue, ''''))}",
																	"type": "Expression"
																},
																"partitionOption": {
																	"value": "@json(item().CopySourceSettings).partitionOption",
																	"type": "Expression"
																},
																"partitionSettings": {
																	"partitionColumnName": {
																		"value": "@json(item().CopySourceSettings).partitionColumnName",
																		"type": "Expression"
																	},
																	"partitionUpperBound": {
																		"value": "@json(item().CopySourceSettings).partitionUpperBound",
																		"type": "Expression"
																	},
																	"partitionLowerBound": {
																		"value": "@json(item().CopySourceSettings).partitionLowerBound",
																		"type": "Expression"
																	},
																	"partitionNames": "@json(item().CopySourceSettings).partitionNames"
																}
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"enableSkipIncompatibleRow": false,
															"validateDataConsistency": false,
															"logSettings": {
																"enableCopyActivityLog": true,
																"copyActivityLogSettings": {
																	"logLevel": "Info",
																	"enableReliableLogging": true
																},
																"logLocationSettings": {
																	"linkedServiceName": {
																		"referenceName": "ADLSGen2",
																		"type": "LinkedServiceReference"
																	},
																	"path": "world-wide-imports"
																}
															},
															"translator": {
																"value": "@json(item().CopyActivitySettings).translator",
																"type": "Expression"
															}
														},
														"inputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_SourceDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_schema": {
																		"value": "@json(item().SourceObjectSettings).schema",
																		"type": "Expression"
																	},
																	"cw_table": {
																		"value": "@json(item().SourceObjectSettings).table",
																		"type": "Expression"
																	},
																	"cw_ls_ServerName": {
																		"value": "@json(activity('GetSourceConnectionValues').output.value[0].ConnectionSettings).ServerName",
																		"type": "Expression"
																	},
																	"cw_ls_DatabaseName": {
																		"value": "@json(activity('GetSourceConnectionValues').output.value[0].ConnectionSettings).DatabaseName",
																		"type": "Expression"
																	},
																	"cw_ls_UserName": {
																		"value": "@json(activity('GetSourceConnectionValues').output.value[0].ConnectionSettings).UserName",
																		"type": "Expression"
																	},
																	"cw_ls_SecretName": {
																		"value": "@json(activity('GetSourceConnectionValues').output.value[0].ConnectionSettings).SecretName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_DestinationDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_fileName": {
																		"value": "@{json(item().SinkObjectSettings).fileName}-@{json(item().DataLoadingBehaviorSettings).watermarkColumnStartValue}-@{activity('GetMaxWatermarkValue').output.firstRow.CurrentMaxWaterMarkColumnValue}",
																		"type": "Expression"
																	},
																	"cw_folderPath": {
																		"value": "@json(item().SinkObjectSettings).folderPath",
																		"type": "Expression"
																	},
																	"cw_fileSystem": {
																		"value": "@json(item().SinkObjectSettings).fileSystem",
																		"type": "Expression"
																	},
																	"cw_ls_StorageAccName": {
																		"value": "@json(activity('GetDestinationConnectionValues').output.value[0].ConnectionSettings).StorageAccName",
																		"type": "Expression"
																	},
																	"cw_ls_SecretName": {
																		"value": "@json(activity('GetDestinationConnectionValues').output.value[0].ConnectionSettings).SecretName",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "UpdateWatermarkColumnValue",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "DeltaLoadOneObject",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[metadata].[UpdateWatermarkColumnValue_zyh]",
															"storedProcedureParameters": {
																"Id": {
																	"value": {
																		"value": "@item().Id",
																		"type": "Expression"
																	},
																	"type": "Int32"
																},
																"watermarkColumnStartValue": {
																	"value": {
																		"value": "@activity('GetMaxWatermarkValue').output.firstRow.CurrentMaxWaterMarkColumnValue",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "LS_AzSQL_DB_Control_TB",
															"type": "LinkedServiceReference"
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "DefaultFullLoadOneObject",
												"description": "Take a full snapshot on this object and copy it to the destination",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [
													{
														"name": "Source",
														"value": "@{json(item().SourceObjectSettings).schema}.@{json(item().SourceObjectSettings).table}"
													},
													{
														"name": "Destination",
														"value": "@{json(item().SinkObjectSettings).fileSystem}/@{json(item().SinkObjectSettings).folderPath}/@{json(item().SinkObjectSettings).fileName}"
													}
												],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@json(item().CopySourceSettings).sqlReaderQuery",
															"type": "Expression"
														},
														"partitionOption": {
															"value": "@json(item().CopySourceSettings).partitionOption",
															"type": "Expression"
														},
														"partitionSettings": {
															"partitionColumnName": {
																"value": "@json(item().CopySourceSettings).partitionColumnName",
																"type": "Expression"
															},
															"partitionUpperBound": {
																"value": "@json(item().CopySourceSettings).partitionUpperBound",
																"type": "Expression"
															},
															"partitionLowerBound": {
																"value": "@json(item().CopySourceSettings).partitionLowerBound",
																"type": "Expression"
															},
															"partitionNames": "@json(item().CopySourceSettings).partitionNames"
														}
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false,
													"enableSkipIncompatibleRow": false,
													"validateDataConsistency": false,
													"logSettings": {
														"enableCopyActivityLog": true,
														"copyActivityLogSettings": {
															"logLevel": "Info",
															"enableReliableLogging": true
														},
														"logLocationSettings": {
															"linkedServiceName": {
																"referenceName": "ADLSGen2",
																"type": "LinkedServiceReference"
															},
															"path": "world-wide-imports"
														}
													},
													"translator": {
														"value": "@json(item().CopyActivitySettings).translator",
														"type": "Expression"
													}
												},
												"inputs": [
													{
														"referenceName": "MetadataDrivenCopyTask_SourceDS",
														"type": "DatasetReference",
														"parameters": {
															"cw_schema": {
																"value": "@json(item().SourceObjectSettings).schema",
																"type": "Expression"
															},
															"cw_table": {
																"value": "@json(item().SourceObjectSettings).table",
																"type": "Expression"
															},
															"cw_ls_ServerName": {
																"value": "@json(activity('GetSourceConnectionValues').output.value[0].ConnectionSettings).ServerName",
																"type": "Expression"
															},
															"cw_ls_DatabaseName": {
																"value": "@json(activity('GetSourceConnectionValues').output.value[0].ConnectionSettings).DatabaseName",
																"type": "Expression"
															},
															"cw_ls_UserName": {
																"value": "@json(activity('GetSourceConnectionValues').output.value[0].ConnectionSettings).UserName",
																"type": "Expression"
															},
															"cw_ls_SecretName": {
																"value": "@json(activity('GetSourceConnectionValues').output.value[0].ConnectionSettings).SecretName",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "MetadataDrivenCopyTask_DestinationDS",
														"type": "DatasetReference",
														"parameters": {
															"cw_fileName": {
																"value": "@json(item().SinkObjectSettings).fileName",
																"type": "Expression"
															},
															"cw_folderPath": {
																"value": "@json(item().SinkObjectSettings).folderPath",
																"type": "Expression"
															},
															"cw_fileSystem": {
																"value": "@json(item().SinkObjectSettings).fileSystem",
																"type": "Expression"
															},
															"cw_ls_StorageAccName": {
																"value": "@json(activity('GetDestinationConnectionValues').output.value[0].ConnectionSettings).StorageAccName",
																"type": "Expression"
															},
															"cw_ls_SecretName": {
																"value": "@json(activity('GetDestinationConnectionValues').output.value[0].ConnectionSettings).SecretName",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "GetSourceConnectionValues",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select ConnectionSettings from @{pipeline().parameters.ConnectionControlTableName}\n                                where Name = '@{item().SourceConnectionSettingsName}'",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "MetadataDrivenCopyTask_ControlDS",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "GetDestinationConnectionValues",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select ConnectionSettings from @{pipeline().parameters.ConnectionControlTableName}\n                                where Name = '@{item().SinkConnectionSettingsName}'",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "MetadataDrivenCopyTask_ControlDS",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ObjectsPerGroupToCopy": {
						"type": "Array"
					},
					"ConnectionControlTableName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_zyh_20240727"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MetadataDrivenCopyTask_ControlDS')]",
				"[concat(variables('factoryId'), '/datasets/MetadataDrivenCopyTask_SourceDS')]",
				"[concat(variables('factoryId'), '/datasets/MetadataDrivenCopyTask_DestinationDS')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_AzSQL_DB_Control_TB')]",
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_MiddleLevel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will copy one batch of objects. The objects belonging to this batch will be copied parallelly.",
				"activities": [
					{
						"name": "DivideOneBatchIntoMultipleGroups",
						"description": "Divide objects from single batch into multiple sub parallel groups to avoid reaching the output limit of lookup activity.",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0, add(div(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity),\n                    if(equals(mod(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity), 0), 0, 1)))",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 50,
							"activities": [
								{
									"name": "GetObjectsPerGroupToCopy",
									"description": "Get objects (tables etc.) from control table required to be copied in this group. The order of objects to be copied following the TaskId in control table (ORDER BY [TaskId] DESC).",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "WITH OrderedControlTable AS (\n                             SELECT *, ROW_NUMBER() OVER (ORDER BY [TaskId], [Id] DESC) AS RowNumber\n                             FROM @{pipeline().parameters.MainControlTableName}\n                             where TopLevelPipelineName = '@{pipeline().parameters.TopLevelPipelineName}'\n                             and TriggerName like '%@{pipeline().parameters.TriggerName}%' and CopyEnabled = 1)\n                             SELECT * FROM OrderedControlTable WHERE RowNumber BETWEEN @{add(mul(int(item()),pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity),\n                             add(mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.CurrentSequentialNumberOfBatch), 1))}\n                             AND @{min(add(mul(int(item()), pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity), add(mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.CurrentSequentialNumberOfBatch),\n                             pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity)),\n                            mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, add(pipeline().parameters.CurrentSequentialNumberOfBatch,1)), pipeline().parameters.SumOfObjectsToCopy)}",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "MetadataDrivenCopyTask_ControlDS",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "CopyObjectsInOneGroup",
									"description": "Execute another pipeline to copy objects from one group. The objects belonging to this group will be copied parallelly.",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "GetObjectsPerGroupToCopy",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "MetadataDrivenCopyTask_BottomLevel",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ObjectsPerGroupToCopy": {
												"value": "@activity('GetObjectsPerGroupToCopy').output.value",
												"type": "Expression"
											},
											"ConnectionControlTableName": {
												"value": "@pipeline().parameters.ConnectionControlTableName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"MaxNumberOfObjectsReturnedFromLookupActivity": {
						"type": "Int"
					},
					"TopLevelPipelineName": {
						"type": "String"
					},
					"TriggerName": {
						"type": "String"
					},
					"CurrentSequentialNumberOfBatch": {
						"type": "Int"
					},
					"SumOfObjectsToCopy": {
						"type": "Int"
					},
					"SumOfObjectsToCopyForCurrentBatch": {
						"type": "Int"
					},
					"MainControlTableName": {
						"type": "String"
					},
					"ConnectionControlTableName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_zyh_20240727"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MetadataDrivenCopyTask_ControlDS')]",
				"[concat(variables('factoryId'), '/pipelines/MetadataDrivenCopyTask_BottomLevel')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_TopLevel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will count the total number of objects (tables etc.) required to be copied in this run, come up with the number of sequential batches based on the max allowed concurrent copy task, and then execute another pipeline to copy different batches sequentially.",
				"activities": [
					{
						"name": "GetSumOfObjectsToCopy",
						"description": "Count the total number of objects (tables etc.) required to be copied in this run.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT count(*) as count FROM @{pipeline().parameters.MainControlTableName} where TopLevelPipelineName='@{pipeline().Pipeline}' and TriggerName like '%@{pipeline().TriggerName}%' and CopyEnabled = 1",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "MetadataDrivenCopyTask_ControlDS",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CopyBatchesOfObjectsSequentially",
						"description": "Come up with the number of sequential batches based on the max allowed concurrent copy tasks, and then execute another pipeline to copy different batches sequentially.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetSumOfObjectsToCopy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0, add(div(activity('GetSumOfObjectsToCopy').output.firstRow.count,\n                    pipeline().parameters.MaxNumberOfConcurrentTasks),\n                    if(equals(mod(activity('GetSumOfObjectsToCopy').output.firstRow.count,\n                    pipeline().parameters.MaxNumberOfConcurrentTasks), 0), 0, 1)))",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "CopyObjectsInOneBatch",
									"description": "Execute another pipeline to copy one batch of objects. The objects belonging to this batch will be copied parallelly.",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "MetadataDrivenCopyTask_MiddleLevel",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"MaxNumberOfObjectsReturnedFromLookupActivity": {
												"value": "@pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity",
												"type": "Expression"
											},
											"TopLevelPipelineName": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											},
											"TriggerName": {
												"value": "@{pipeline().TriggerName}",
												"type": "Expression"
											},
											"CurrentSequentialNumberOfBatch": {
												"value": "@item()",
												"type": "Expression"
											},
											"SumOfObjectsToCopy": {
												"value": "@activity('GetSumOfObjectsToCopy').output.firstRow.count",
												"type": "Expression"
											},
											"SumOfObjectsToCopyForCurrentBatch": {
												"value": "@min(pipeline().parameters.MaxNumberOfConcurrentTasks, activity('GetSumOfObjectsToCopy').output.firstRow.count)",
												"type": "Expression"
											},
											"MainControlTableName": {
												"value": "@pipeline().parameters.MainControlTableName",
												"type": "Expression"
											},
											"ConnectionControlTableName": {
												"value": "@pipeline().parameters.ConnectionControlTableName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"MaxNumberOfObjectsReturnedFromLookupActivity": {
						"type": "Int",
						"defaultValue": 5000
					},
					"MaxNumberOfConcurrentTasks": {
						"type": "Int",
						"defaultValue": 20
					},
					"MainControlTableName": {
						"type": "String",
						"defaultValue": "metadata.MainControlTable"
					},
					"ConnectionControlTableName": {
						"type": "String",
						"defaultValue": "metadata.ConnectionControlTable_zyh"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_zyh_20240727"
				},
				"annotations": [
					"MetadataDrivenSolution"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MetadataDrivenCopyTask_ControlDS')]",
				"[concat(variables('factoryId'), '/pipelines/MetadataDrivenCopyTask_MiddleLevel')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_ControlDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzSQL_DB_Control_TB",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_zyh_20240727"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "metadata",
					"table": "MainControlTable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzSQL_DB_Control_TB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_DestinationDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference",
					"parameters": {
						"StorageAccName": {
							"value": "@dataset().cw_ls_StorageAccName",
							"type": "Expression"
						},
						"SecretName": "ADLS-azsaws-AccessKey"
					}
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					},
					"cw_folderPath": {
						"type": "Object"
					},
					"cw_fileSystem": {
						"type": "String"
					},
					"cw_ls_StorageAccName": {
						"type": "String"
					},
					"cw_ls_SecretName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_zyh_20240727"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().cw_folderPath",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().cw_fileSystem",
							"type": "Expression"
						}
					},
					"compressionCodec": "none"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_SourceDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQLServer",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": {
							"value": "@dataset().cw_ls_ServerName",
							"type": "Expression"
						},
						"DatabaseName": {
							"value": "@dataset().cw_ls_DatabaseName",
							"type": "Expression"
						},
						"UserName": {
							"value": "@dataset().cw_ls_UserName",
							"type": "Expression"
						},
						"SecretName": {
							"value": "@dataset().cw_ls_SecretName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"cw_schema": {
						"type": "String"
					},
					"cw_table": {
						"type": "String"
					},
					"cw_ls_ServerName": {
						"type": "String"
					},
					"cw_ls_DatabaseName": {
						"type": "String"
					},
					"cw_ls_UserName": {
						"type": "String"
					},
					"cw_ls_SecretName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_zyh_20240727"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().cw_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SQLServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLSGen2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"StorageAccName": {
						"type": "string",
						"defaultValue": "azsaws"
					},
					"SecretName": {
						"type": "string",
						"defaultValue": "ADLS-azsaws-AccessKey"
					}
				},
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ADLSGen2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AKV_AzKVaults",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().SecretName",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "AzHostedIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AzHostedIR')]",
				"[concat(variables('factoryId'), '/linkedServices/AKV_AzKVaults')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AKV_AzKVaults')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AKV_AzKVaults_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_AzSQL_DB_Control_TB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('LS_AzSQL_DB_Control_TB_properties_typeProperties_server')]",
					"database": "[parameters('LS_AzSQL_DB_Control_TB_properties_typeProperties_database')]",
					"encrypt": "optional",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('LS_AzSQL_DB_Control_TB_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AKV_AzKVaults",
							"type": "LinkedServiceReference"
						},
						"secretName": "sqlsws-WideWorldImporters-password"
					}
				},
				"connectVia": {
					"referenceName": "AzHostedIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AzHostedIR')]",
				"[concat(variables('factoryId'), '/linkedServices/AKV_AzKVaults')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_SQLServer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"ServerName": {
						"type": "string",
						"defaultValue": "10.0.0.4"
					},
					"DatabaseName": {
						"type": "string",
						"defaultValue": "WideWorldImporters"
					},
					"UserName": {
						"type": "string",
						"defaultValue": "gdev"
					},
					"SecretName": {
						"type": "string",
						"defaultValue": "OnPremSQLServer-AzVm-Pass"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('LS_SQLServer_properties_typeProperties_server')]",
					"database": "[parameters('LS_SQLServer_properties_typeProperties_database')]",
					"encrypt": "optional",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('LS_SQLServer_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AKV_AzKVaults",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().SecretName",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "SelfHostedIRAzVm",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHostedIRAzVm')]",
				"[concat(variables('factoryId'), '/linkedServices/AKV_AzKVaults')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger_Hourly')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "MetadataDrivenCopyTask_TopLevel",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 24,
						"startTime": "2024-07-26T15:11:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/MetadataDrivenCopyTask_TopLevel')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzHostedIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "Australia East",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SelfHostedIRAzVm')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {
					"linkedInfo": {
						"resourceId": "[parameters('SelfHostedIRAzVm_properties_typeProperties_linkedInfo_resourceId')]",
						"authorizationType": "Rbac"
					}
				}
			},
			"dependsOn": []
		}
	]
}